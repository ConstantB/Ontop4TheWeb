/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderTokenManager.java */
package org.openrdf.query.parser.sparql.ast;
import java.io.StringReader;
import org.openrdf.model.URI;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.query.algebra.Compare.CompareOp;
import org.openrdf.query.algebra.MathExpr.MathOp;

/** Token Manager. */
public class SyntaxTreeBuilderTokenManager implements SyntaxTreeBuilderConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 11;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 10;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x1fc00L, 0x0L);
      case 61:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x1000000800000000L, 0x10040000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x800200000000L, 0x140000400001L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x2300000080200000L, 0x310000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800200a000000000L, 0x0L, 0x9820008L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x400000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100040000000000L, 0x4000020000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x2000000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x301c0000L, 0x20400000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x6004000000000000L, 0x80000000000000L, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x600000000L, 0x80224L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x800080000000000L, 0x40000000L, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x8820008000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000000800000000L, 0x1f885105800002L, 0x4007c40L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x40000180L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x40400002000000L, 0x80000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x2000000L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 91:
         jjmatchedKind = 8;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 97:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x1000000800000000L, 0x10040000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800200000000L, 0x140000400001L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x2300000080200000L, 0x310000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800200a000000000L, 0x0L, 0x9820008L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x400000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100040000000000L, 0x4000020000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x2000000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x301c0000L, 0x20400000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6004000000000000L, 0x80000000000000L, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x600000000L, 0x80224L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800080000000000L, 0x40000000L, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x8820008000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000000800000000L, 0x1f885105800002L, 0x4007c40L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x40000180L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x40400002000000L, 0x80000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 123:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L, active1, 0x800221400000002L, active2, 0x800008L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40200L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L, active1, 0x202008c000000000L, active2, 0x9000042L);
      case 70:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x1fc00L, active2, 0x7c00L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L, active1, 0x140200000000L, active2, 0x60000a0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x10010000L);
      case 78:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x400400000400000L, active2, 0x20400000L);
      case 79:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L, active1, 0x83000000c0200001L, active2, 0x188015L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L, active1, 0x12000000000L, active2, 0x220000L);
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x1c0000L, active2, 0x80000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x1e800005800000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000102000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         break;
      case 90:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L, active1, 0x800221400000002L, active2, 0x800008L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L, active1, 0x202008c000000000L, active2, 0x9000042L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x1fc00L, active2, 0x7c00L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L, active1, 0x140200000000L, active2, 0x60000a0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x10010000L);
      case 110:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x400400000400000L, active2, 0x20400000L);
      case 111:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L, active1, 0x83000000c0200001L, active2, 0x188015L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L, active1, 0x12000000000L, active2, 0x220000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x1c0000L, active2, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x1e800005800000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000102000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         break;
      case 122:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 53:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0xc0000000200000L, active2, 0xfc02L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000040000L, active2, 0L);
      case 67:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000000L, active2, 0x40L);
      case 68:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1, 0x400000000000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1, 0L, active2, 0x210000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8000000L);
      case 71:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L, active1, 0x2000000002000000L, active2, 0x80000000L);
      case 75:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L, active1, 0x220000080000L, active2, 0x5000000L);
      case 77:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L, active1, 0x1000000002L, active2, 0x80L);
      case 78:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L, active1, 0xb00140000100000L, active2, 0x24L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1, 0x4000002000400000L, active2, 0x20000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20004000000000L, active2, 0x100000L);
      case 82:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e880005800000L, active2, 0L);
      case 83:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L, active1, 0L, active2, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L, active1, 0x4001fc00L, active2, 0x22800000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000010080000001L, active2, 0x10L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x80000L);
      case 87:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0xc0000000200000L, active2, 0xfc02L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000040000L, active2, 0L);
      case 99:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000000L, active2, 0x40L);
      case 100:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1, 0x400000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1, 0L, active2, 0x210000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8000000L);
      case 103:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L, active1, 0x2000000002000000L, active2, 0x80000000L);
      case 107:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L, active1, 0x220000080000L, active2, 0x5000000L);
      case 109:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L, active1, 0x1000000002L, active2, 0x80L);
      case 110:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L, active1, 0xb00140000100000L, active2, 0x24L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1, 0x4000002000400000L, active2, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20004000000000L, active2, 0x100000L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e880005800000L, active2, 0L);
      case 115:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L, active1, 0L, active2, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L, active1, 0x4001fc00L, active2, 0x22800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000010080000001L, active2, 0x10L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x80000L);
      case 119:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x40000000L, active2, 0L);
      case 49:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1800L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 65:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x10004000000000L, active2, 0x8210000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 67:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x100000000000000L, active2, 0L);
      case 68:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000c00000L, active2, 0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1, 0x4408000000002L, active2, 0x5400080L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 71:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 72:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L, active1, 0x80000L, active2, 0L);
      case 76:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20800001240000L, active2, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000080000001L, active2, 0x80000000L);
      case 79:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x4400000000000000L, active2, 0x40L);
      case 80:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x1000000000L, active2, 0L);
      case 82:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L, active2, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L, active1, 0xc3020000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L, active1, 0x20000000001fc00L, active2, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L, active1, 0x202004100000L, active2, 0x20L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 89:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x10004000000000L, active2, 0x8210000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x100000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000c00000L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1, 0x4408000000002L, active2, 0x5400080L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 104:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L, active1, 0x80000L, active2, 0L);
      case 108:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20800001240000L, active2, 0L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000080000001L, active2, 0x80000000L);
      case 111:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x4400000000000000L, active2, 0x40L);
      case 112:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x1000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L, active2, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L, active1, 0xc3020000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L, active1, 0x20000000001fc00L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L, active1, 0x202004100000L, active2, 0x20L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 121:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 53:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x320000001040000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L, active1, 0x8a00000200000L, active2, 0L);
      case 70:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 71:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         break;
      case 72:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1, 0x180040000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x100000L, active2, 0L);
      case 78:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x4000000000000L, active2, 0x4000040L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200001fc00L, active2, 0L);
      case 82:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x4000000000L, active2, 0x400000L);
      case 83:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 4;
         }
         break;
      case 84:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L, active1, 0x3000000080002L, active2, 0x1200020L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0x8000000L);
      case 88:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x320000001040000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L, active1, 0x8a00000200000L, active2, 0L);
      case 102:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 103:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         break;
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1, 0x180040000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x100000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x4000000000000L, active2, 0x4000040L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200001fc00L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x4000000000L, active2, 0x400000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L, active1, 0x3000000080002L, active2, 0x1200020L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0x8000000L);
      case 120:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
         }
         break;
      case 52:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         break;
      case 54:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         break;
      case 58:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1fc00L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x2004000000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20080000000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L, active2, 0x40L);
      case 69:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x400000000180002L, active2, 0x20L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 71:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x200000004000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 78:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L, active1, 0x100001040000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 88:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x2004000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20080000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L, active2, 0x40L);
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x400000000180002L, active2, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x200000004000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 110:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L, active1, 0x100001040000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 120:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1fc00L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x2000200000L, active2, 0L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 71:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 75:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000180002L, active2, 0L);
      case 83:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x4000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x2000200000L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000180002L, active2, 0L);
      case 115:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x4000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1fc00L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 76:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6000000000L, active2, 0L);
      case 82:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 84:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L);
      case 82:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         break;
      case 83:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1fc00L);
      case 99:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         break;
      case 115:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L);
      case 83:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         break;
      case 87:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1fc00L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         break;
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000L);
      case 83:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
         }
         break;
      case 87:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1fc00L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
         }
         break;
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa12_0(active1, 0x1fc00L);
      case 84:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 11;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000000000L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 11;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa13_0(active1, 0x1fc00L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x1fc00L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 13;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa14_0(active1, 0x1fc00L);
      case 105:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 13;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa14_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active1, 0x1fc00L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa16_0(active1, 0x1fc00L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa17_0(active1, 0x1fc00L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active1, 0x1fc00L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa19_0(active1, 0x1fc00L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa20_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa21_0(active1, 0x1fc00L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa22_0(active1, 0x1fc00L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 21);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa23_0(active1, 0x1fc00L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 22);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 22);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa24_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 23);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 23);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa25_0(active1, 0x1fc00L);
      case 100:
         return jjMoveStringLiteralDfa25_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 24);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 24);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa26_0(active1, 0x1fc00L);
      case 101:
         return jjMoveStringLiteralDfa26_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 25);
}
private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 25);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 25);
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa27_0(active1, 0x1fc00L);
      case 102:
         return jjMoveStringLiteralDfa27_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 26);
}
private int jjMoveStringLiteralDfa27_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 26);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 26);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa28_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 27);
}
private int jjMoveStringLiteralDfa28_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 27);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 27);
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa29_0(active1, 0x1fc00L);
      case 102:
         return jjMoveStringLiteralDfa29_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 28);
}
private int jjMoveStringLiteralDfa29_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 28);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 28);
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa30_0(active1, 0x1fc00L);
      case 117:
         return jjMoveStringLiteralDfa30_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 29);
}
private int jjMoveStringLiteralDfa30_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 29);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 29);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa31_0(active1, 0x1fc00L);
      case 110:
         return jjMoveStringLiteralDfa31_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 30);
}
private int jjMoveStringLiteralDfa31_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 30);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 30);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa32_0(active1, 0x1fc00L);
      case 99:
         return jjMoveStringLiteralDfa32_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 31);
}
private int jjMoveStringLiteralDfa32_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 31);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 31);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa33_0(active1, 0x1fc00L);
      case 116:
         return jjMoveStringLiteralDfa33_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 32);
}
private int jjMoveStringLiteralDfa33_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 32);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 32);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa34_0(active1, 0x1fc00L);
      case 105:
         return jjMoveStringLiteralDfa34_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 33);
}
private int jjMoveStringLiteralDfa34_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 33);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 33);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa35_0(active1, 0x1fc00L);
      case 111:
         return jjMoveStringLiteralDfa35_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 34);
}
private int jjMoveStringLiteralDfa35_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 34);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 34);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa36_0(active1, 0x1fc00L);
      case 110:
         return jjMoveStringLiteralDfa36_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 35);
}
private int jjMoveStringLiteralDfa36_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 35);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 35);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa37_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 36);
}
private int jjMoveStringLiteralDfa37_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 36);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 36);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa38_0(active1, 0x1fc00L);
      case 103:
         return jjMoveStringLiteralDfa38_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 37);
}
private int jjMoveStringLiteralDfa38_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 37);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 37);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa39_0(active1, 0x1fc00L);
      case 101:
         return jjMoveStringLiteralDfa39_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 38);
}
private int jjMoveStringLiteralDfa39_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 38);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 38);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa40_0(active1, 0x1fc00L);
      case 111:
         return jjMoveStringLiteralDfa40_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 39);
}
private int jjMoveStringLiteralDfa40_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 39);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 39);
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa41_0(active1, 0x1fc00L);
      case 115:
         return jjMoveStringLiteralDfa41_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 40);
}
private int jjMoveStringLiteralDfa41_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 40);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 40);
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa42_0(active1, 0x1fc00L);
      case 112:
         return jjMoveStringLiteralDfa42_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 41);
}
private int jjMoveStringLiteralDfa42_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 41);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 41);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa43_0(active1, 0x1fc00L);
      case 97:
         return jjMoveStringLiteralDfa43_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 42);
}
private int jjMoveStringLiteralDfa43_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 42);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 42);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa44_0(active1, 0x1fc00L);
      case 114:
         return jjMoveStringLiteralDfa44_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 43);
}
private int jjMoveStringLiteralDfa44_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 43);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 43);
   }
   switch(curChar)
   {
      case 81:
         return jjMoveStringLiteralDfa45_0(active1, 0x1fc00L);
      case 113:
         return jjMoveStringLiteralDfa45_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 44);
}
private int jjMoveStringLiteralDfa45_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 44);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 44);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa46_0(active1, 0x1fc00L);
      case 108:
         return jjMoveStringLiteralDfa46_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 45);
}
private int jjMoveStringLiteralDfa46_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 45);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 45);
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa47_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 46);
}
private int jjMoveStringLiteralDfa47_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 46);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 46);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa48_0(active1, 0x1fc00L);
      case 101:
         return jjMoveStringLiteralDfa48_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 47);
}
private int jjMoveStringLiteralDfa48_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 47);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 47);
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa49_0(active1, 0x1fc00L);
      case 104:
         return jjMoveStringLiteralDfa49_0(active1, 0x1fc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 48);
}
private int jjMoveStringLiteralDfa49_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 48);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 48);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa50_0(active1, 0x16000L);
      case 68:
         return jjMoveStringLiteralDfa50_0(active1, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa50_0(active1, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa50_0(active1, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa50_0(active1, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa50_0(active1, 0x16000L);
      case 100:
         return jjMoveStringLiteralDfa50_0(active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa50_0(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa50_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa50_0(active1, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 49);
}
private int jjMoveStringLiteralDfa50_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 49);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 49);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa51_0(active1, 0x800L);
      case 78:
         return jjMoveStringLiteralDfa51_0(active1, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa51_0(active1, 0x16000L);
      case 81:
         return jjMoveStringLiteralDfa51_0(active1, 0x400L);
      case 86:
         return jjMoveStringLiteralDfa51_0(active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa51_0(active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa51_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa51_0(active1, 0x16000L);
      case 113:
         return jjMoveStringLiteralDfa51_0(active1, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa51_0(active1, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 50);
}
private int jjMoveStringLiteralDfa51_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 50);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 50);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa52_0(active1, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa52_0(active1, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa52_0(active1, 0x8800L);
      case 85:
         return jjMoveStringLiteralDfa52_0(active1, 0x400L);
      case 86:
         return jjMoveStringLiteralDfa52_0(active1, 0x6000L);
      case 101:
         return jjMoveStringLiteralDfa52_0(active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa52_0(active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa52_0(active1, 0x8800L);
      case 117:
         return jjMoveStringLiteralDfa52_0(active1, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa52_0(active1, 0x6000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 51);
}
private int jjMoveStringLiteralDfa52_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 51);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 51);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa53_0(active1, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa53_0(active1, 0x6000L);
      case 73:
         return jjMoveStringLiteralDfa53_0(active1, 0x8000L);
      case 74:
         return jjMoveStringLiteralDfa53_0(active1, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa53_0(active1, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa53_0(active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa53_0(active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa53_0(active1, 0x6000L);
      case 105:
         return jjMoveStringLiteralDfa53_0(active1, 0x8000L);
      case 106:
         return jjMoveStringLiteralDfa53_0(active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa53_0(active1, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa53_0(active1, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 52);
}
private int jjMoveStringLiteralDfa53_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 52);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 52);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa54_0(active1, 0x10000L);
      case 68:
         return jjMoveStringLiteralDfa54_0(active1, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa54_0(active1, 0x1400L);
      case 79:
         return jjMoveStringLiteralDfa54_0(active1, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa54_0(active1, 0x6000L);
      case 97:
         return jjMoveStringLiteralDfa54_0(active1, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa54_0(active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa54_0(active1, 0x1400L);
      case 111:
         return jjMoveStringLiteralDfa54_0(active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa54_0(active1, 0x6000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 53);
}
private int jjMoveStringLiteralDfa54_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 53);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 53);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa55_0(active1, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa55_0(active1, 0xc000L);
      case 73:
         return jjMoveStringLiteralDfa55_0(active1, 0x10800L);
      case 83:
         return jjMoveStringLiteralDfa55_0(active1, 0x2400L);
      case 97:
         return jjMoveStringLiteralDfa55_0(active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa55_0(active1, 0xc000L);
      case 105:
         return jjMoveStringLiteralDfa55_0(active1, 0x10800L);
      case 115:
         return jjMoveStringLiteralDfa55_0(active1, 0x2400L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 54);
}
private int jjMoveStringLiteralDfa55_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 54);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 54);
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 55;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 55;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 55;
         }
         break;
      case 68:
         return jjMoveStringLiteralDfa56_0(active1, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa56_0(active1, 0x10800L);
      case 80:
         return jjMoveStringLiteralDfa56_0(active1, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa56_0(active1, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa56_0(active1, 0x10800L);
      case 112:
         return jjMoveStringLiteralDfa56_0(active1, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 55);
}
private int jjMoveStringLiteralDfa56_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 55);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 55);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa57_0(active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa57_0(active1, 0x11000L);
      case 84:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 56;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa57_0(active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa57_0(active1, 0x11000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 56;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 56);
}
private int jjMoveStringLiteralDfa57_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 56);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 56);
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 57;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 57;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa58_0(active1, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa58_0(active1, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 57);
}
private int jjMoveStringLiteralDfa58_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 57);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 57);
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 58;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 58);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec10 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec12 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 723;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(718, 719);
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  else if (curChar == 58)
                  {
                     if (kind > 161)
                        kind = 161;
                     jjCheckNAddStates(17, 19);
                  }
                  else if (curChar == 60)
                     jjAddStates(20, 27);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 40)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if (curChar == 34)
                     jjCheckNAddStates(28, 30);
                  else if (curChar == 39)
                     jjCheckNAddStates(31, 33);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 41 && kind > 30)
                     kind = 30;
                  break;
               case 7:
                  if ((0x100003600L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 12:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 62 && kind > 160)
                     kind = 160;
                  break;
               case 15:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x3ff200000000000L & l) != 0L && kind > 163)
                     kind = 163;
                  break;
               case 20:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar == 45)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if (curChar == 39)
                     jjCheckNAddStates(31, 33);
                  break;
               case 31:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 34:
                  if (curChar == 39 && kind > 182)
                     kind = 182;
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddStates(28, 30);
                  break;
               case 36:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 38:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 39:
                  if (curChar == 34 && kind > 183)
                     kind = 183;
                  break;
               case 40:
                  if (curChar == 39)
                     jjCheckNAddStates(36, 39);
                  break;
               case 41:
               case 46:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 45:
                  if (curChar == 39)
                     jjAddStates(40, 41);
                  break;
               case 47:
                  if (curChar == 39 && kind > 184)
                     kind = 184;
                  break;
               case 48:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 50:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 34)
                     jjCheckNAddStates(42, 45);
                  break;
               case 52:
               case 57:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 55:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 56:
                  if (curChar == 34)
                     jjAddStates(46, 47);
                  break;
               case 58:
                  if (curChar == 34 && kind > 185)
                     kind = 185;
                  break;
               case 59:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 61:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 170:
                  if (curChar == 60)
                     jjAddStates(20, 27);
                  break;
               case 171:
                  if (curChar == 62 && kind > 66)
                     kind = 66;
                  break;
               case 182:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 192:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 201:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 205:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 209:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 217:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 221:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 228:
                  if (curChar == 62 && kind > 67)
                     kind = 67;
                  break;
               case 237:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 247:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 256:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 260:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 264:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 272:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 276:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 283:
                  if (curChar == 62 && kind > 68)
                     kind = 68;
                  break;
               case 294:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 304:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 313:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 317:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 321:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 329:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 333:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 332;
                  break;
               case 334:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 335:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 340:
                  if (curChar == 62 && kind > 69)
                     kind = 69;
                  break;
               case 353:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 363:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 362;
                  break;
               case 372:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 376:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 380:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 388:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 387;
                  break;
               case 392:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 391;
                  break;
               case 393:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 394:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 393;
                  break;
               case 399:
                  if (curChar == 62 && kind > 70)
                     kind = 70;
                  break;
               case 409:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 408;
                  break;
               case 419:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 418;
                  break;
               case 428:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 427;
                  break;
               case 432:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 431;
                  break;
               case 436:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 435;
                  break;
               case 444:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 443;
                  break;
               case 448:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 447;
                  break;
               case 449:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 448;
                  break;
               case 450:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 449;
                  break;
               case 455:
                  if (curChar == 62 && kind > 71)
                     kind = 71;
                  break;
               case 464:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 463;
                  break;
               case 474:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 473;
                  break;
               case 483:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 482;
                  break;
               case 487:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 486;
                  break;
               case 491:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 490;
                  break;
               case 499:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 498;
                  break;
               case 503:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 502;
                  break;
               case 504:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 503;
                  break;
               case 505:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 504;
                  break;
               case 510:
                  if (curChar == 62 && kind > 72)
                     kind = 72;
                  break;
               case 521:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 520;
                  break;
               case 531:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 530;
                  break;
               case 540:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 539;
                  break;
               case 544:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 543;
                  break;
               case 548:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 547;
                  break;
               case 556:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 555;
                  break;
               case 560:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 559;
                  break;
               case 561:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 560;
                  break;
               case 562:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 561;
                  break;
               case 567:
                  if (curChar == 62 && kind > 73)
                     kind = 73;
                  break;
               case 577:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 576;
                  break;
               case 587:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 586;
                  break;
               case 596:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 595;
                  break;
               case 600:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 599;
                  break;
               case 604:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 603;
                  break;
               case 612:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 611;
                  break;
               case 616:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 615;
                  break;
               case 617:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 616;
                  break;
               case 618:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 617;
                  break;
               case 633:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 634:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 635;
                  break;
               case 635:
                  if (curChar == 58 && kind > 161)
                     kind = 161;
                  break;
               case 636:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 637:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 638;
                  break;
               case 638:
                  if (curChar == 58)
                     jjCheckNAddStates(17, 19);
                  break;
               case 639:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 640:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 641:
                  if ((0x7ff200000000000L & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 643:
                  if ((0xa800ff7e00000000L & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 644:
                  if (curChar == 37)
                     jjAddStates(56, 57);
                  break;
               case 645:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 646;
                  break;
               case 646:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 647:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 648;
                  break;
               case 648:
                  if ((0x3ff000000000000L & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 649:
                  if ((0xa800ff7e00000000L & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 651:
                  if ((0xa800ff7e00000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 652:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 653;
                  break;
               case 653:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 654;
                  break;
               case 654:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 655:
                  if (curChar != 58)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddStates(17, 19);
                  break;
               case 656:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddStates(0, 6);
                  break;
               case 657:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(657);
                  break;
               case 658:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(658, 659);
                  break;
               case 659:
                  if (curChar != 46)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(660);
                  break;
               case 660:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(660);
                  break;
               case 661:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(661, 662);
                  break;
               case 662:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(663, 664);
                  break;
               case 663:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(663, 664);
                  break;
               case 665:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(666);
                  break;
               case 666:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(666);
                  break;
               case 667:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(667, 668);
                  break;
               case 669:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(670);
                  break;
               case 670:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(670);
                  break;
               case 671:
                  if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  break;
               case 672:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(672);
                  break;
               case 673:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(673, 674);
                  break;
               case 674:
                  if (curChar != 46)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(675);
                  break;
               case 675:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(675);
                  break;
               case 676:
                  if (curChar == 46)
                     jjCheckNAdd(677);
                  break;
               case 677:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 173)
                     kind = 173;
                  jjCheckNAdd(677);
                  break;
               case 678:
                  if (curChar == 46)
                     jjCheckNAdd(679);
                  break;
               case 679:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(679, 680);
                  break;
               case 681:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(682);
                  break;
               case 682:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  jjCheckNAdd(682);
                  break;
               case 683:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 684:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(684, 685);
                  break;
               case 685:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(686, 687);
                  break;
               case 686:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(686, 687);
                  break;
               case 688:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(689);
                  break;
               case 689:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  jjCheckNAdd(689);
                  break;
               case 690:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(690, 691);
                  break;
               case 692:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(693);
                  break;
               case 693:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  jjCheckNAdd(693);
                  break;
               case 694:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  break;
               case 695:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(695);
                  break;
               case 696:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(696, 697);
                  break;
               case 697:
                  if (curChar != 46)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(698);
                  break;
               case 698:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(698);
                  break;
               case 699:
                  if (curChar == 46)
                     jjCheckNAdd(700);
                  break;
               case 700:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 174)
                     kind = 174;
                  jjCheckNAdd(700);
                  break;
               case 701:
                  if (curChar == 46)
                     jjCheckNAdd(702);
                  break;
               case 702:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(702, 703);
                  break;
               case 704:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(705);
                  break;
               case 705:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  jjCheckNAdd(705);
                  break;
               case 706:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 707:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(707, 708);
                  break;
               case 708:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(709, 710);
                  break;
               case 709:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(709, 710);
                  break;
               case 711:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(712);
                  break;
               case 712:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  jjCheckNAdd(712);
                  break;
               case 713:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(713, 714);
                  break;
               case 715:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(716);
                  break;
               case 716:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  jjCheckNAdd(716);
                  break;
               case 717:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(718, 719);
                  break;
               case 718:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(718);
                  break;
               case 719:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(719, 720);
                  break;
               case 721:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(722);
                  break;
               case 722:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjCheckNAdd(722);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 71);
                  else if (curChar == 64)
                     jjCheckNAdd(27);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 91)
                     jjAddStates(34, 35);
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(72, 74);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(75, 82);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 91)
                     jjAddStates(34, 35);
                  break;
               case 8:
                  if (curChar == 93 && kind > 31)
                     kind = 31;
                  break;
               case 9:
                  if ((0x20000000200L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 10:
               case 631:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 163)
                     kind = 163;
                  break;
               case 19:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(22);
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 64)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 32:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 37:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 43:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 53:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 54:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 62:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(75, 82);
                  break;
               case 63:
                  if ((0x1000000010000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 64:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x8000000080000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 77:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x10000000100000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 89:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x8000000080000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 103:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x8000000080000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 119:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x400000004000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 132:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x8000000080000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 144:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x8000000080000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 158:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 172:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 183:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 193:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 202:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 206:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 218:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 224:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 229:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 238:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 257:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 261:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 265:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 273:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 279:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 284:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 295:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 297:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 298:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 300:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 301:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 305:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 306:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 310:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 314:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 316:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 318:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 319:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 320:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 319;
                  break;
               case 322:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 321;
                  break;
               case 323:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 322;
                  break;
               case 324:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 325:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 326:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 327:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 328:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 327;
                  break;
               case 330:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 331:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 330;
                  break;
               case 332:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 336:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 337:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 336;
                  break;
               case 338:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 337;
                  break;
               case 339:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 341:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 340;
                  break;
               case 342:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 341;
                  break;
               case 343:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 344:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 345:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 346:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 347:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 346;
                  break;
               case 348:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 349:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 348;
                  break;
               case 350:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 349;
                  break;
               case 351:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 350;
                  break;
               case 352:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 351;
                  break;
               case 354:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 353;
                  break;
               case 355:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 354;
                  break;
               case 356:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 355;
                  break;
               case 357:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 358:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 359:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 360:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 361:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 362:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 361;
                  break;
               case 364:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 363;
                  break;
               case 365:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 364;
                  break;
               case 366:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 367:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 366;
                  break;
               case 368:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 367;
                  break;
               case 369:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 368;
                  break;
               case 370:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 369;
                  break;
               case 371:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 373:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 372;
                  break;
               case 374:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 373;
                  break;
               case 375:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 377:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 376;
                  break;
               case 378:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 377;
                  break;
               case 379:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 381:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 382:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 383:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 384:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 385:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 384;
                  break;
               case 386:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 385;
                  break;
               case 387:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 386;
                  break;
               case 389:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 388;
                  break;
               case 390:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 389;
                  break;
               case 391:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 390;
                  break;
               case 395:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 394;
                  break;
               case 396:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 395;
                  break;
               case 397:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 396;
                  break;
               case 398:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 397;
                  break;
               case 400:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 399;
                  break;
               case 401:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 400;
                  break;
               case 402:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 401;
                  break;
               case 403:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 402;
                  break;
               case 404:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 403;
                  break;
               case 405:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 404;
                  break;
               case 406:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 405;
                  break;
               case 407:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 406;
                  break;
               case 408:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 407;
                  break;
               case 410:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 409;
                  break;
               case 411:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 410;
                  break;
               case 412:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 413:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 412;
                  break;
               case 414:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 413;
                  break;
               case 415:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 414;
                  break;
               case 416:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 415;
                  break;
               case 417:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 416;
                  break;
               case 418:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 417;
                  break;
               case 420:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 419;
                  break;
               case 421:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 420;
                  break;
               case 422:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 421;
                  break;
               case 423:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 422;
                  break;
               case 424:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 423;
                  break;
               case 425:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 424;
                  break;
               case 426:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 425;
                  break;
               case 427:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 426;
                  break;
               case 429:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 428;
                  break;
               case 430:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 429;
                  break;
               case 431:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 430;
                  break;
               case 433:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 432;
                  break;
               case 434:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 433;
                  break;
               case 435:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 434;
                  break;
               case 437:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 436;
                  break;
               case 438:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 437;
                  break;
               case 439:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 438;
                  break;
               case 440:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 439;
                  break;
               case 441:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 440;
                  break;
               case 442:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 441;
                  break;
               case 443:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 442;
                  break;
               case 445:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 444;
                  break;
               case 446:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 445;
                  break;
               case 447:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 446;
                  break;
               case 451:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 450;
                  break;
               case 452:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 451;
                  break;
               case 453:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 452;
                  break;
               case 454:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 453;
                  break;
               case 456:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 455;
                  break;
               case 457:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 456;
                  break;
               case 458:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 457;
                  break;
               case 459:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 458;
                  break;
               case 460:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 459;
                  break;
               case 461:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 460;
                  break;
               case 462:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 461;
                  break;
               case 463:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 462;
                  break;
               case 465:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 464;
                  break;
               case 466:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 465;
                  break;
               case 467:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 466;
                  break;
               case 468:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 467;
                  break;
               case 469:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 468;
                  break;
               case 470:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 469;
                  break;
               case 471:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 470;
                  break;
               case 472:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 471;
                  break;
               case 473:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 472;
                  break;
               case 475:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 474;
                  break;
               case 476:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 475;
                  break;
               case 477:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 476;
                  break;
               case 478:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 477;
                  break;
               case 479:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 478;
                  break;
               case 480:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 479;
                  break;
               case 481:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 480;
                  break;
               case 482:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 481;
                  break;
               case 484:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 483;
                  break;
               case 485:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 484;
                  break;
               case 486:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 485;
                  break;
               case 488:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 487;
                  break;
               case 489:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 488;
                  break;
               case 490:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 489;
                  break;
               case 492:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 491;
                  break;
               case 493:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 492;
                  break;
               case 494:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 493;
                  break;
               case 495:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 494;
                  break;
               case 496:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 495;
                  break;
               case 497:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 496;
                  break;
               case 498:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 497;
                  break;
               case 500:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 499;
                  break;
               case 501:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 500;
                  break;
               case 502:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 501;
                  break;
               case 506:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 505;
                  break;
               case 507:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 506;
                  break;
               case 508:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 507;
                  break;
               case 509:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 508;
                  break;
               case 511:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 510;
                  break;
               case 512:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 511;
                  break;
               case 513:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 512;
                  break;
               case 514:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 513;
                  break;
               case 515:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 514;
                  break;
               case 516:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 515;
                  break;
               case 517:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 516;
                  break;
               case 518:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 517;
                  break;
               case 519:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 518;
                  break;
               case 520:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 519;
                  break;
               case 522:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 521;
                  break;
               case 523:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 522;
                  break;
               case 524:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 523;
                  break;
               case 525:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 524;
                  break;
               case 526:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 525;
                  break;
               case 527:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 526;
                  break;
               case 528:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 527;
                  break;
               case 529:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 528;
                  break;
               case 530:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 529;
                  break;
               case 532:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 533:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 532;
                  break;
               case 534:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 535:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 536:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 535;
                  break;
               case 537:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 536;
                  break;
               case 538:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 539:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 538;
                  break;
               case 541:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 540;
                  break;
               case 542:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 543:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 542;
                  break;
               case 545:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 544;
                  break;
               case 546:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 545;
                  break;
               case 547:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 546;
                  break;
               case 549:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 548;
                  break;
               case 550:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 551:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 550;
                  break;
               case 552:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 553:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 552;
                  break;
               case 554:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 553;
                  break;
               case 555:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 554;
                  break;
               case 557:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 556;
                  break;
               case 558:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 557;
                  break;
               case 559:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 558;
                  break;
               case 563:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 562;
                  break;
               case 564:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 563;
                  break;
               case 565:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 564;
                  break;
               case 566:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 565;
                  break;
               case 568:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 567;
                  break;
               case 569:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 568;
                  break;
               case 570:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 569;
                  break;
               case 571:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 570;
                  break;
               case 572:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 571;
                  break;
               case 573:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 572;
                  break;
               case 574:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 573;
                  break;
               case 575:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 574;
                  break;
               case 576:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 575;
                  break;
               case 578:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 577;
                  break;
               case 579:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 578;
                  break;
               case 580:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 579;
                  break;
               case 581:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 580;
                  break;
               case 582:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 581;
                  break;
               case 583:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 582;
                  break;
               case 584:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 583;
                  break;
               case 585:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 584;
                  break;
               case 586:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 585;
                  break;
               case 588:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 587;
                  break;
               case 589:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 588;
                  break;
               case 590:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 589;
                  break;
               case 591:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 590;
                  break;
               case 592:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 591;
                  break;
               case 593:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 592;
                  break;
               case 594:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 593;
                  break;
               case 595:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 594;
                  break;
               case 597:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 596;
                  break;
               case 598:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 597;
                  break;
               case 599:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 598;
                  break;
               case 601:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 600;
                  break;
               case 602:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 601;
                  break;
               case 603:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 602;
                  break;
               case 605:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 604;
                  break;
               case 606:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 605;
                  break;
               case 607:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 606;
                  break;
               case 608:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 607;
                  break;
               case 609:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 608;
                  break;
               case 610:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 609;
                  break;
               case 611:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 610;
                  break;
               case 613:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 612;
                  break;
               case 614:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 613;
                  break;
               case 615:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 614;
                  break;
               case 619:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 618;
                  break;
               case 620:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 619;
                  break;
               case 621:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 620;
                  break;
               case 622:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 621;
                  break;
               case 623:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(72, 74);
                  break;
               case 624:
                  if ((0x20000000200L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 625:
               case 628:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(624);
                  break;
               case 626:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 625;
                  break;
               case 627:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 626;
                  break;
               case 629:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 628;
                  break;
               case 630:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 629;
                  break;
               case 632:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 71);
                  break;
               case 633:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(633, 634);
                  break;
               case 634:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(635);
                  break;
               case 636:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(636, 637);
                  break;
               case 637:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(638);
                  break;
               case 639:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 640:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 641:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 642:
                  if (curChar == 92)
                     jjAddStates(85, 86);
                  break;
               case 643:
                  if ((0x4000000080000001L & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 645:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 646;
                  break;
               case 646:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(52, 55);
                  break;
               case 647:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 648;
                  break;
               case 648:
                  if ((0x7e0000007eL & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 649:
                  if ((0x4000000080000001L & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 650:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 651;
                  break;
               case 651:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 653:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 654;
                  break;
               case 654:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 664:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 668:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 680:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 687:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 691:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 703:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(97, 98);
                  break;
               case 710:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(99, 100);
                  break;
               case 714:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(101, 102);
                  break;
               case 720:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(103, 104);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(66, 71);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(83, 84);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 163)
                     kind = 163;
                  break;
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(25);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 33);
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 30);
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 39);
                  break;
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(42, 45);
                  break;
               case 633:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(633, 634);
                  break;
               case 634:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(635);
                  break;
               case 636:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(636, 637);
                  break;
               case 637:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(638);
                  break;
               case 639:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(52, 55);
                  break;
               case 640:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(52, 55);
                  break;
               case 641:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 162)
                     kind = 162;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 723 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   657, 658, 659, 661, 662, 667, 668, 695, 696, 699, 701, 706, 672, 673, 676, 678, 
   683, 639, 650, 652, 227, 282, 339, 398, 454, 509, 566, 622, 36, 37, 39, 31, 
   32, 34, 7, 8, 41, 42, 43, 45, 46, 48, 52, 53, 54, 56, 57, 59, 
   633, 634, 636, 637, 640, 641, 642, 644, 645, 647, 684, 685, 690, 691, 707, 708, 
   713, 714, 633, 634, 635, 636, 637, 638, 627, 630, 631, 75, 87, 101, 117, 130, 
   142, 156, 169, 13, 14, 643, 649, 665, 666, 669, 670, 681, 682, 688, 689, 692, 
   693, 704, 705, 711, 712, 715, 716, 721, 722, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41", "\174\174", 
"\46\46", "\53", "\55", "\52", "\77", "\57", "\174", "\136", "\136\136", null, null, 
"\141", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xffffffffffffffffL, 0x3f0e7ffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xcL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x8L, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[723];
private final int[] jjstateSet = new int[1446];
protected char curChar;
/** Constructor. */
public SyntaxTreeBuilderTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SyntaxTreeBuilderTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 723; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
